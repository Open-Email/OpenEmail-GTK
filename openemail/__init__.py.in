# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: Copyright 2025 Mercata Sagl
# SPDX-FileContributor: kramo

"""A Mail/HTTPS client."""

import asyncio
from asyncio import Task
from pathlib import Path
from typing import Any, Callable, Coroutine

from gi.events import GLibEventLoopPolicy
from gi.repository import Gio, GLib, GObject

from .core import client

APP_ID = "@APP_ID@"
VERSION = "@VERSION@"
PREFIX = "@PREFIX@"
PROFILE = "@PROFILE@"

settings = Gio.Settings.new(APP_ID)
state_settings = Gio.Settings.new(f"{APP_ID}.State")
secret_service = f"{APP_ID}.Keys"
log_file = Path(GLib.get_user_state_dir()) / "openemail.log"
client.data_dir = Path(GLib.get_user_data_dir()) / "openemail"


class Notifier(GObject.Object):
    """Used for sending user-facing notifications throughout the application."""

    send_notification = GObject.Signal(name="send", arg_types=(str,))

    def send(self, title: str) -> None:
        """Emit the `Notifier::send` signal with `title`."""
        self.emit("send", title)


notifier = Notifier()

asyncio.set_event_loop_policy(_policy := GLibEventLoopPolicy())
_loop: asyncio.AbstractEventLoop = _policy.get_event_loop()
_tasks: set[Task] = set()


def run_task(
    coro: Coroutine[Any, Any, Any],
    callback: Callable[[bool], Any] | None = None,
) -> None:
    """Run a coroutine in a task.

    Calls `callback on finish with `True` if no exceptions were raised and `False` otherwise.
    """
    _tasks.add(task := _loop.create_task(coro))

    def done_callback(task: Task[Any]) -> None:
        if callback:
            callback(not task.exception())

        _tasks.discard(task)

    task.add_done_callback(done_callback)
