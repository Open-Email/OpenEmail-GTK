# shared.py.in
#
# Authors: kramo
# Copyright 2025 Mercata Sagl
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later

"""Shared data across the application."""

import asyncio
from collections import defaultdict
from functools import wraps
from itertools import chain
from pathlib import Path
from re import sub
from typing import Any, Callable, Coroutine, NamedTuple

from gi.events import GLibEventLoopPolicy
from gi.repository import Gdk, Gio, GLib, GObject

from .core import network
from .core.message import Message
from .core.network import (
    fetch_broadcasts,
    fetch_contacts,
    fetch_link_messages,
    fetch_profile,
    fetch_profile_image,
)
from .core.user import Address, Profile, User

APP_ID = "@APP_ID@"
VERSION = "@VERSION@"
PREFIX = "@PREFIX@"
PROFILE = "@PROFILE@"

settings = Gio.Settings.new(APP_ID)
state_settings = Gio.Settings.new(f"{APP_ID}.State")
secret_service = f"{APP_ID}.Keys"
log_file = Path(GLib.get_user_state_dir()) / "openemail.log"
network.cache_dir = Path(GLib.get_user_cache_dir()) / "openemail"

asyncio.set_event_loop_policy(policy := GLibEventLoopPolicy())
loop: asyncio.AbstractEventLoop = policy.get_event_loop()

user: User


class MailProfile(GObject.Object):
    """A GObject representation of a user profile."""

    __gtype_name__ = "MailProfile"

    has_name = GObject.Property(type=bool, default=False)
    image = GObject.Property(type=Gdk.Paintable)

    _profile: Profile | None = None
    _address: str | None = None
    _name: str | None = None

    @property
    def profile(self) -> Profile | None:
        """The profile of the user."""
        return self._profile

    @profile.setter
    def profile(self, profile: Profile | None) -> None:
        self._profile = profile

        if not profile:
            self.image = None
            return

        self.address = str(profile.address)
        self.name = str(profile.required["name"])

    @GObject.Property(type=str)
    def address(self) -> str | None:
        """Get the user's Mail/HTTPS address."""
        return self._address

    @address.setter
    def address(self, address: str) -> None:
        self._address = address

        if not self.name:
            self.name = address

    @GObject.Property(type=str)
    def name(self) -> str | None:
        """Get the user's name."""
        return self._name

    @name.setter
    def name(self, name: str) -> None:
        self._name = name
        self.has_name = name != self.address


class ProfileCategory(NamedTuple):
    """A category of profile fields."""

    ident: str
    name: str


profile_categories: dict[ProfileCategory, dict[str, str]] = {
    ProfileCategory("general", _("General")): {
        "status": _("Status"),
        "about": _("About"),
    },
    ProfileCategory("personal", _("Personal")): {
        "gender": _("Gender"),
        "relationship-status": _("Relationship Status"),
        "birthday": _("Birthday"),
        "education": _("Education"),
        "languages": _("Languages"),
        "places-lived": _("Places Lived"),
        "notes": _("Notes"),
    },
    ProfileCategory("work", _("Work")): {
        "work": _("Work"),
        "organization": _("Organization"),
        "department": _("Department"),
        "job-title": _("Job Title"),
    },
    ProfileCategory("interests", _("Interests")): {
        "interests": _("Interests"),
        "books": _("Books"),
        "movies": _("Movies"),
        "music": _("Music"),
        "sports": _("Sports"),
    },
    ProfileCategory("contacts", _("Contacts")): {
        "website": _("Website"),
        "location": _("Location"),
        "mailing-address": _("Mailing Address"),
        "phone": _("Phone"),
    },
}


profiles: defaultdict[Address, MailProfile] = defaultdict(MailProfile)
address_book = Gio.ListStore.new(MailProfile)  # type: ignore


class MailMessage(GObject.Object):
    """A Mail/HTTPS message."""

    __gtype_name__ = "MailMessage"

    message: Message | None = None

    name = GObject.Property(type=str)
    date = GObject.Property(type=str)
    subject = GObject.Property(type=str)
    body = GObject.Property(type=str)
    profile_image = GObject.Property(type=Gdk.Paintable)

    _name_binding: GObject.Binding | None = None
    _image_binding: GObject.Binding | None = None

    @property
    def trashed(self) -> bool:
        """Whether the item is in the trash."""
        if not self.message:
            return False

        return self.message.envelope.message_id in settings.get_strv(
            "trashed-message-ids"
        )

    def __init__(self, message: Message | None = None, **kwargs: Any) -> None:
        super().__init__(**kwargs)

        if message:
            self.set_from_message(message)

    def set_from_message(self, message: Message) -> None:
        """Update properties of the row from `message`."""
        self.message = message

        self.date = message.envelope.date.strftime("%x")
        self.subject = message.envelope.subject
        self.body = message.body

        if self._name_binding:
            self._name_binding.unbind()
        self._name_binding = profiles[message.envelope.author].bind_property(
            "name", self, "name", GObject.BindingFlags.SYNC_CREATE
        )

        if self._image_binding:
            self._image_binding.unbind()
        self._image_binding = profiles[message.envelope.author].bind_property(
            "image", self, "profile-image", GObject.BindingFlags.SYNC_CREATE
        )


broadcasts = Gio.ListStore.new(MailMessage)
inbox = Gio.ListStore.new(MailMessage)
outbox = Gio.ListStore.new(MailMessage)


_loading = 0


def _loads(func: Callable[..., Coroutine]) -> Callable[..., Coroutine]:
    @wraps(func)
    async def wrapper(*args: Any, **kwargs: Any) -> Coroutine:
        global _loading
        _loading += 1
        result = await func(*args, **kwargs)
        _loading -= 1
        return result

    return wrapper


def is_loading() -> bool:
    """Check whether or not an update is currently ongoing."""
    return bool(_loading)


@_loads
async def update_user_profile() -> None:
    """Update the profile of the user by fetching new data remotely."""
    if not user:
        return

    if profile := await fetch_profile(user.address):
        user.public_signing_key = profile.required["signing-key"].value
        if key := profile.optional.get("encryption-key"):
            user.public_encryption_key = key.value

    profiles[user.address].profile = profile

    try:
        profiles[user.address].image = Gdk.Texture.new_from_bytes(
            GLib.Bytes.new(await fetch_profile_image(user.address))
        )
    except GLib.Error:
        profiles[user.address].image = None


@_loads
async def update_address_book() -> None:
    """Update the address book of the user by fetching new data remotely."""
    global address_book
    global profiles

    if not user:
        return

    contacts = await fetch_contacts(user)

    address_book.remove_all()
    for contact in contacts:
        profiles[contact].address = str(contact)
        address_book.append(profiles[contact])


@_loads
async def update_profiles() -> None:
    """Update the profiles for contacts in the user's address book by fetching new data remotely."""
    global profiles

    if not user:
        return

    async def update_profile(address: Address) -> None:
        profiles[address].profile = await fetch_profile(address)

    async def update_profile_image(address: Address) -> None:
        try:
            profiles[address].image = (
                Gdk.Texture.new_from_bytes(GLib.Bytes.new(image))
                if (image := await fetch_profile_image(address))
                else None
            )
        except GLib.Error:
            profiles[address].image = None

    asyncio.gather(
        *(update_profile(Address(contact.address)) for contact in address_book),  # type: ignore
        *(update_profile_image(Address(contact.address)) for contact in address_book),  # type: ignore
    )


@_loads
async def update_broadcasts_list() -> None:
    """Update the broadcasts list of the user by fetching new data remotely."""
    global broadcasts

    if not user:
        return

    result = await asyncio.gather(
        *(fetch_broadcasts(user, Address(contact.address)) for contact in address_book)  # type: ignore
    )

    broadcasts.remove_all()
    for message in chain(*result):
        broadcasts.append(MailMessage(message))


@_loads
async def update_messages_list() -> None:
    """Update the messages list of the user by fetching new data remotely."""
    global inbox

    if not user:
        return

    result = await asyncio.gather(
        *(
            fetch_link_messages(user, Address(contact.address))  # type: ignore
            for contact in address_book
        )
    )

    inbox.remove_all()
    for message in chain(*result):
        inbox.append(MailMessage(message))


@_loads
async def update_outbox() -> None:
    """Update the outbox of the user by fetching new data remotely."""
    global outbox

    if not user:
        return

    result = await asyncio.gather(
        fetch_link_messages(user, user.address),
        fetch_broadcasts(user, user.address),
    )

    outbox.remove_all()
    for message in chain(*result):
        outbox.append(MailMessage(message))


_tasks: set[asyncio.Task] = set()


def run_task(
    coro: Coroutine[Any, Any, Any],
    callback: Callable[[], Any] | None = None,
) -> None:
    """Run a coroutine in a task, calling `callback` on finish."""
    global _tasks

    _tasks.add(task := loop.create_task(coro))
    task.add_done_callback(lambda *_: callback() if callback else None)
    task.add_done_callback(_tasks.discard)


def trash_message(message_id: str) -> None:
    """Move the message associated with `message_id` to the trash."""
    settings.set_strv(
        "trashed-message-ids",
        settings.get_strv("trashed-message-ids") + [message_id],
    )


def restore_message(message_id: str) -> None:
    """Restore the message associated with `message_id` from the trash."""
    try:
        (trashed := settings.get_strv("trashed-message-ids")).remove(message_id)
    except ValueError:
        return

    settings.set_strv("trashed-message-ids", trashed)
