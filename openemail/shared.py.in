# shared.py.in
#
# Authors: kramo
# Copyright 2025 Mercata Sagl
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later

"""Shared data across the application."""

from typing import Any, Callable

from gi.repository import Adw, Gdk, Gio, GLib

from openemail.message import Message
from openemail.network import (
    fetch_broadcasts,
    fetch_contacts,
    fetch_profile,
    fetch_profile_image,
)
from openemail.user import Address, Profile, User

APP_ID = "@APP_ID@"
VERSION = "@VERSION@"
PREFIX = "@PREFIX@"
PROFILE = "@PROFILE@"

schema = Gio.Settings.new(APP_ID)
secret_service = f"{APP_ID}.Keys"

user: User | None = None

address_book: dict[Address, Profile | None] = {}
photo_book: dict[Address, Gdk.Paintable | None] = {}
broadcasts: list[Message] = []

_loading = 0


def is_loading() -> bool:
    """Check whether or not an update is currently ongoing."""
    return bool(_loading)


def update_address_book(callback: Callable[[], Any] | None = None) -> None:
    """Update the address and photo books of the user by fetching new data remotely."""
    global _loading

    running = 0
    new_address_book: dict[Address, Profile | None] = {}
    new_photo_book: dict[Address, Gdk.Paintable | None] = {}

    def fetch_done_cb() -> None:
        global _loading
        nonlocal running
        global address_book
        global photo_book

        running -= 1
        if not running:
            _loading -= 1

            address_book = new_address_book
            photo_book = new_photo_book

            if callback:
                GLib.idle_add(callback)

    def update_profile(contact: Address) -> None:
        new_address_book[contact] = fetch_profile(contact)
        fetch_done_cb()

    def update_profile_image(contact: Address) -> None:
        new_photo_book[contact] = (
            Gdk.Texture.new_from_bytes(
                GLib.Bytes.new(image)  # type: ignore
            )
            if (image := fetch_profile_image(contact))
            else None
        )
        fetch_done_cb()

    def update_contacts() -> None:
        global _loading
        nonlocal running

        if user:
            (contacts := list(fetch_contacts(user))).sort(
                key=lambda address: address.address
            )

            for contact in contacts:
                running += 2
                GLib.Thread.new(None, update_profile, contact)
                GLib.Thread.new(None, update_profile_image, contact)

    _loading += 1
    GLib.Thread.new(None, update_contacts)


def update_broadcasts_list(callback: Callable[[], Any] | None = None) -> None:
    """Update the broadcasts list of the user by fetching new data remotely."""
    global _loading

    running = len(address_book)
    new_broadcasts: list[Message] = []

    def fetch_done_cb() -> None:
        global _loading
        nonlocal running
        global broadcasts

        running -= 1
        if not running:
            new_broadcasts.sort(
                key=lambda message: message.envelope.date,
                reverse=True,
            )

            broadcasts = new_broadcasts
            _loading -= 1

            if callback:
                GLib.idle_add(callback)

    def update_broadcasts(author: Address) -> None:
        global broadcasts
        nonlocal new_broadcasts

        if user:
            new_broadcasts += fetch_broadcasts(user, author)

        fetch_done_cb()

    _loading += 1
    for contact in address_book:
        GLib.Thread.new(None, update_broadcasts, contact)


def get_name(address: Address) -> str:
    """Get the name of a user.

    Returns the string representation of `address` if no profile has been found.
    """
    return (
        str(profile.required["name"])
        if (profile := address_book.get(address))
        else address.address
    )
