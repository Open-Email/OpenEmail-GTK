# shared.py.in
#
# Authors: kramo
# Copyright 2025 Mercata Sagl
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later

"""Shared data across the application."""

from typing import Any, Callable

from gi.repository import Gio, GLib

from openemail.messages import Message
from openemail.network import fetch_broadcasts, fetch_contacts
from openemail.user import Address, User

APP_ID = "@APP_ID@"
VERSION = "@VERSION@"
PREFIX = "@PREFIX@"
PROFILE = "@PROFILE@"

schema = Gio.Settings.new(APP_ID)
secret_service = f"{APP_ID}.Keys"

user: User | None = None

address_book: list[Address] = []
broadcasts: list[Message] = []

loading = 0


def update_address_book(callback: Callable[[], Any] | None = None) -> None:
    """Update the address book of the user by fetching new data remotely."""
    global loading
    global address_book
    address_book = []

    def update_contacts() -> None:
        global loading
        global address_book

        if user:
            address_book += fetch_contacts(user)

        loading -= 1
        if callback:
            GLib.idle_add(callback)

    loading += 1
    GLib.Thread.new(None, update_contacts)


def update_broadcasts_list(callback: Callable[[], Any] | None = None) -> None:
    """Update the broadcasts list of the user by fetching new data remotely."""
    global loading
    global broadcasts
    broadcasts = []

    running = len(address_book)

    def fetch_done_cb() -> None:
        nonlocal running

        running -= 1
        if (not running) and callback:
            GLib.idle_add(callback)

    def update_broadcasts(author: Address) -> None:
        global loading
        global broadcasts

        if user:
            broadcasts += fetch_broadcasts(user, author)

        loading -= 1
        fetch_done_cb()

    for contact in address_book:
        loading += 1
        GLib.Thread.new(None, update_broadcasts, contact)
