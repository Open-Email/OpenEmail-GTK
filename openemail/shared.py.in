# shared.py.in
#
# Authors: kramo
# Copyright 2025 Mercata Sagl
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later

import asyncio
from asyncio import Task
from pathlib import Path
from typing import Any, Callable, Coroutine

from gi.events import GLibEventLoopPolicy
from gi.repository import Gio, GLib, GObject

from .core import client

APP_ID = "@APP_ID@"
VERSION = "@VERSION@"
PREFIX = "@PREFIX@"
PROFILE = "@PROFILE@"

settings = Gio.Settings.new(APP_ID)
state_settings = Gio.Settings.new(f"{APP_ID}.State")
secret_service = f"{APP_ID}.Keys"
log_file = Path(GLib.get_user_state_dir()) / "openemail.log"
client.cache_dir = Path(GLib.get_user_cache_dir()) / "openemail"
client.data_dir = Path(GLib.get_user_data_dir()) / "openemail"

asyncio.set_event_loop_policy(_policy := GLibEventLoopPolicy())
_loop: asyncio.AbstractEventLoop = _policy.get_event_loop()
_tasks: set[Task] = set()


def run_task(
    coro: Coroutine[Any, Any, Any],
    on_success: Callable[[], Any] | None = None,
    on_failure: Callable[[], Any] | None = None,
) -> None:
    """Run a coroutine in a task.

    Calls the `on_success` callback if no exceptions were raised and `on_failure` otherwise.
    """
    _tasks.add(task := _loop.create_task(coro))

    def done_callback(task: Task[Any]) -> None:
        if task.exception():
            if on_failure:
                on_failure()
                return

        if on_success:
            on_success()

        _tasks.discard(task)

    task.add_done_callback(done_callback)


class Notifier(GObject.Object):
    """Used for sending user-facing notifications throughout the application."""

    send_notification = GObject.Signal(name="send", arg_types=(str,))

    def send(self, title: str) -> None:
        """Emit the `Notifier::send` signal with `title`."""
        self.emit("send", title)


notifier = Notifier()
